--P1. Count the number of rows in the all_sessions_raw table (0 point)

SELECT COUNT(*) AS `number_of_rows`
FROM `data-to-insights.ecommerce.all_sessions_raw`;


--P2. Count the number of rows in the all_sessions table (0 point)

SELECT COUNT(*) AS `number_of_rows`
FROM `data-to-insights.ecommerce.all_sessions`;


--P3. Check the min and max date of the records in the all_sessions (use the date column) (0 points).

SELECTMIN(date) AS `min_date`,
MAX(date) AS `max_date`
FROM `data-to-insights.ecommerce.all_sessions`;


--P4. Write a query that shows total unique visitors. (Your query determines the total views by counting product_views and the number of unique visitors by counting fullVisitorId) (5 points)

SELECT
COUNT(*) AS product_views,
COUNT(DISTINCT fullVisitorId) AS unique_visitors
FROM `data-to-insights.ecommerce.all_sessions`;


--P5. Write a query that shows total unique visitors (fullVisitorID) by the referring site (channelGrouping) (5 points).

SELECT
channelGrouping AS referring_site, 
COUNT(DISTINCT fullVisitorId) AS unique_visitors
FROM `data-to-insights.ecommerce.all_sessions` 
GROUP BY referring_siteORDER BY unique_visitors DESC;


--P6. Write a query to list all the unique product names (v2ProductName) alphabetically (5 points).

SELECT
(v2ProductName) AS unique_product_name
FROM `data-to-insights.ecommerce.all_sessions` 
GROUP BY unique_product_name
ORDER BY unique_product_name;


--P7. Write a query that returns the number of duplicate records in the “all_sessions_raw” table.
(Hint: you need to group the records by all the columns in the table) (5 points).

SELECT
COUNT(*) as num_duplicate_records, *
FROM `data-to-insights.ecommerce.all_sessions_raw`GROUP BY
fullVisitorId, channelGrouping, time, country, city, totalTransactionRevenue, transactions, timeOnSite, pageviews, sessionQualityDim, date, visitId, type, productRefundAmount, productQuantity, productPrice, productRevenue, productSKU, v2ProductName, v2ProductCategory, productVariant, currencyCode, itemQuantity, itemRevenue, transactionRevenue, transactionId, pageTitle, searchKeyword, pagePathLevel1,eCommerceAction_type, eCommerceAction_step, eCommerceAction_option 
HAVING num_duplicate_records > 1;


--P8. Write a query that ensures there are no duplicate records in the “all_sessions” table (5 points).

SELECT
COUNT(*) as num_records, *
FROM
`data-to-insights.ecommerce.all_sessions`
GROUP BY
fullVisitorId, channelGrouping, time, country, city, totalTransactionRevenue, transactions, timeOnSite, pageviews, sessionQualityDim, date, visitId, type, productRefundAmount, productQuantity, productPrice, productRevenue, productSKU, v2ProductName, v2ProductCategory, productVariant, currencyCode, itemQuantity, itemRevenue, transactionRevenue, transactionId, pageTitle, searchKeyword, pagePathLevel1,eCommerceAction_type, eCommerceAction_step, eCommerceAction_option 
HAVING num_records > 1;


--P9. Write a query to list the five products with the most views (product_views) from all visitors (including people who have viewed the same product more than once). Your query counts the number of times a product (v2ProductName) was viewed (product_views), puts the list in descending order, and lists the top 5 entries (5 points).

SELECT(v2ProductName) AS product_name,
COUNT(*) AS product_views
FROM `data-to-insights.ecommerce.all_sessions` 
GROUP BY product_name
ORDER BY product_views DESC
LIMIT 5;


--P10. Now refine the query to no longer double-count product views for visitors who have viewed a product many times. Each distinct product view should only count once per visitor (10 points).

# first find the number of views of each unique product viewed by each visitor
WITH unique_views_by_person AS ( SELECT
fullVisitorId,
(v2ProductName) AS product_name
FROM `data-to-insights.ecommerce.all_sessions`
GROUP BY fullVisitorId, product_name )

# then aggregate the number of unique views and sort in descending order
SELECT
product_name,
COUNT(*) AS unique_view FROM unique_views_by_person
GROUP BY product_name 
ORDER BY unique_view DESC 
LIMIT 5


--P11. expand your previous query to include the total number of distinct products ordered and the total number of total units ordered (productQuantity) (5 points).

# find each unique product viewed, order and quantity by each visitor
WITH unique_order_by_person AS ( SELECT
fullVisitorId,
(v2ProductName) AS product_name, 
COUNT(productQuantity) AS orders, 
SUM(productQuantity) AS quantity
FROM `data-to-insights.ecommerce.all_sessions`
GROUP BY fullVisitorId, product_name)

# then aggregate the number of unique views, orders and quantity and sort in descending order of unique views
SELECT
product_name,
COUNT(*) AS unique_view,
SUM(orders) AS total_orders,
SUM(quantity) AS total_quantity 
FROM unique_order_by_person 
GROUP BY product_name 
ORDER BY unique_view DESC LIMIT 5;


--P12. Expand the query to include the average amount of product per order (total number of units ordered/total number of orders, or SUM(productQuantity)/COUNT(productQuantity)) (5 points).

WITH unique_order_by_person AS ( SELECT
fullVisitorId,
(v2ProductName) AS product_name, COUNT(productQuantity) AS orders, SUM(productQuantity) AS quantity
FROM `data-to-insights.ecommerce.all_sessions` GROUP BY fullVisitorId, product_name)
SELECT
product_name,
COUNT(*) AS unique_view,
SUM(orders) AS total_orders,
SUM(quantity) AS total_quantity,
# calculate average quantity per order 
(SUM(quantity)/SUM(orders)) AS avg_quantity_per_order
FROM unique_order_by_person 
GROUP BY product_name 
ORDER BY unique_view DESC LIMIT 5;

